!!! 5
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title teamcity intro

    link(rel='stylesheet', type='text/css', href='styles/main.css')

  body

    article

      section
        h1.fancy Teamcity 
        h1.fancy intro

      section.text-left
        h3 Непрерывная интеграция — это практика разработки программного обеспечения, которая заключается в выполнении частых автоматизированных сборок проекта для скорейшего выявления и решения интеграционных проблем. В обычном проекте, где над разными частями системы разработчики трудятся независимо, стадия интеграции является заключительной. Она может непредсказуемо задержать окончание работ. Переход к непрерывной интеграции позволяет снизить трудоёмкость интеграции и сделать её более предсказуемой за счет наиболее раннего обнаружения и устранения ошибок и противоречий.

        h3 Martin Fowler, 2006

      section
        img(src='http://bugscatcher.net/wp-content/uploads/2013/03/ContinuousIntegrationCycle.png', width='900px', height='800px' )
        

      section
        h1 Плюсы
        ul
          li Автоматически готовое окружение для тестирования.
          li Постоянно доступны последние изменения.
          li Стабильная сборка.
          li Есть ответы на многие вопросы – что? где? когда?
          li С помощью CI систем можно быстро откатиться на предыдущие версии приложения.
          li Окружение, которое максимально похоже на продакшан делает тестирование полезней.("у меня локально не воспроизводится")
          li CI стимулирует разработчиков к улучшению кода и внедрению инженерных практик.

      section
        h1 Минусы и возможные проблемы
        ul
          li Нужно поддерживать
          li Постоянное обновление тестовых серверов. Процесс сборки хоть и занимает мало времени, но в это время тестирование приостанавливается.
          li Иногда, при очередной сборке тестовые данные могут теряться.
          li Отсутствие авто-тестов. Нет гарантии, что что-то не отвалилось. Авто-тесты позволяют проводить мини-регрессию при каждом коммите, тем самым давая спокойствие команде тестирования (ведь, ошибка может пробраться в уже протестированный участок функционала).
          li Легко запутаться где что настраивается и тестируется

      section
        h1 Процесс
        ul
          li Триггер. Событие, при котором запускается сборка продукта. Таким событием может быть: изменения в коде, определенное время, нажатие на кнопку.
          li Выкачивание исходного кода
          li Сборка проекта из исходников.
          li Развертывание базы данных.
          li Развертывание приложения.
          li Тесты. Авто-тесты не являются обязательными, но их выполнение крайне желательно. Это один из важных пунктов хороших практик CI.
          li Статус, отчеты, уведомления по результатам сборки. После прогона тестов получаем результат сборки, детальные отчеты по каждому из этапов интеграции

      section
        h1 Teamcity:
        h2 Server:
        ul
          li работает с системой контроля версии(не всегда)
          li координирует билдагентов
          li хранит артефакты(результаты билдов)
          li веб-интерфейс
        h2 BuildAgent:
        ul
          li выполняет команды сервера, то есть скрипты, которые вы напишете

      section
        h1 Что есть у нас сегодня 
        ul
          li простейший "тест" на сборку проекта по коммиту
          li еженедельный и по запросу запуск тест-сьют 
          li сборка и деплой проекта из кастомной бранчи (на самом деле деплой и старт сервера  - это неправильно, так как тимсити после окончания работы скрипта не показывает- и не должен- состояние, нужна дополнительная тулза)
            
      section
        h1 Что должно быть 
        ul
          li Тесты, которых нет)
          li Всё, что занимает много времени, что может быть автоматизированно

    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/main.js')
